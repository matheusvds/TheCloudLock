//
//  UnlockWorker.swift
//  TheCloudLock
//
//  Created by Matheus Vasconcelos on 18/01/20.
//  Copyright (c) 2020 AppCompany. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

class UnlockWorker {
    
    var cloudLock: CloudLockProtocol
    
    init(cloudLock: CloudLockProtocol) {
        self.cloudLock = cloudLock
    }
    
    func fetchDoors(completion: @escaping (CloudLockResult<[Door]>) -> Void) {
        cloudLock.fetchDoors { result in
            switch result {
            case .success(let data):
                completion(.success(result: data))
            case .failure(let error):
                completion(.failure(error: error))
            }
        }
    }
    
    func unlockDoor(doorID: Int, completion: @escaping (CloudLockResult<Status>) -> Void) {
        cloudLock.unlockDoor(with: doorID) { result in
            switch result {
            case .success(let data):
                switch data.code {
                case 200:
                    completion(.success(result: data))
                case 204:
                    completion(.failure(error: .permissionDenied))
                default:
                    completion(.failure(error: .cannotUnlock))
                }
            case .failure(let error):
                completion(.failure(error: error))
            }
        }
    }
        
}

// MARK: - Cloud Lock Protocol

protocol CloudLockProtocol {
    func fetchDoors(completion: @escaping FetchDoorsCompletionHandler)
    func unlockDoor(with doorID: Int, completion: @escaping UnlockDoorCompletionHandler)
}

// MARK: - Operation results

typealias FetchDoorsCompletionHandler = (CloudLockResult<[Door]>) -> Void
typealias UnlockDoorCompletionHandler = (CloudLockResult<Status>) -> Void

enum CloudLockResult<U> {
    case success(result: U)
    case failure(error: CloudLockError)
}

// MARK: - Operation errors

enum CloudLockError: Error {
    case cannotFetch
    case cannotUnlock
    case permissionDenied
}
