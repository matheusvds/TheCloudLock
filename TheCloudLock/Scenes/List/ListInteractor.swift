//
//  ListInteractor.swift
//  TheCloudLock
//
//  Created by Matheus Vasconcelos on 24/01/20.
//  Copyright (c) 2020 AppCompany. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ListBusinessLogic {
    func fetchItems<T: Item>(type: T.Type, request: List.FetchItems.Request)
    func fetchCredentials<T: Item>(type: T.Type, request: List.FetchItemCredentials.Request)
}

protocol ListDataStore {
    var credential: Credential? { get set }
}

class ListInteractor: ListBusinessLogic, ListDataStore {

    var presenter: ListPresentationLogic?
    var worker: ListWorker? = ListWorker(cloudLockAPI: CloudLockAPI())
    var credentialWorker: CredentialsWorker? = CredentialsWorker(cloudLockAPI: CloudLockAPI())
    var credential: Credential?
    
    // MARK: - Fetch Items
    
    func fetchItems<T: Item>(type: T.Type, request: List.FetchItems.Request) {
        worker?.fetchItems(row: request.row,
                           name: request.name,
                           type: type,
                           completion: { result in
            switch result {
            case .success(let data):
                let response = List.FetchItems.Response(items: data, error: nil)
                self.presenter?.presentFetchedItems(response: response)
            case .failure(let error):
                let response = List.FetchItems.Response(items: [], error: error)
                self.presenter?.presentFetchedItems(response: response)
            }
        })
    }
    
    // MARK: - Fetch Credentials
    
    func fetchCredentials<T: Item>(type: T.Type, request: List.FetchItemCredentials.Request) {
        credentialWorker?.fetchItemCredentials(id: request.id,
                                               name: request.name,
                                               type: type,
                                               completion: { (result: CloudLockResult<Credential>) in
            switch result {
            case .success(let data):
                self.credential = data
                let response = List.FetchItemCredentials.Response(error: nil)
                self.presenter?.presentFetchedCredentials(response: response)
            case .failure(let error):
                let response = List.FetchItemCredentials.Response(error: error)
                self.presenter?.presentFetchedCredentials(response: response)
            }
            
        })
    }
    
}
