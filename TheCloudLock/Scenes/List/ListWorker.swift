//
//  ListWorker.swift
//  TheCloudLock
//
//  Created by Matheus Vasconcelos on 24/01/20.
//  Copyright (c) 2020 AppCompany. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

class ListWorker {
    
    var cloudLockAPI: CloudLockProtocol
    
    init(cloudLockAPI: CloudLockProtocol) {
        self.cloudLockAPI = cloudLockAPI
    }
    
    // MARK: - FetchItems
    
    func fetchItems<T: Item>(row: Int? = nil, name: String? = nil, type: T.Type, completion: @escaping (CloudLockResult<[T]>) -> Void) {
        setFetchItemsBehaviour(row: row, name: name, type: T.self)
        cloudLockAPI.fetchItems(type: [T].self) { result in
            switch result {
            case .success(let data):
                debugPrint("## WORKER ## SUCCESS! - DATA: \(data)")
                completion(.success(result: data))
            case .failure(let error):
                debugPrint("## WORKER ## ERROR! - DATA: \(error)")
                completion(.failure(error: error))
            }
        }
    }
    
    // MARK: - FetchItems Server behaviour
    
    private func setFetchItemsBehaviour<T: Item>(row: Int? = nil, name: String? = nil, type: T.Type) {
        
        // MARK: - Remove
        if row != .none {
            switch type.entityName {
            case "Doors":
                Responses.fetchItemsRemoveDoorsSuccess()
            case "Users":
                Responses.fetchItemsRemoveUsersSuccess()
            default:
                FakeServer.json = nil
            }
            FakeServer.setServer(type: type)
            return
        }
        
        // MARK: - Add
        if name != .none {
            switch type.entityName {
            case "Doors":
                Responses.fetchItemsAddDoorsSuccess()
            case "Users":
                Responses.fetchItemsAddUsersSuccess()
            default:
                FakeServer.json = nil
            }
        }
        
        FakeServer.setServer(type: type)
    }
    
}
