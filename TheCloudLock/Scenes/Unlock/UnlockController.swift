//
//  UnlockViewController.swift
//  TheCloudLock
//
//  Created by Matheus Vasconcelos on 18/01/20.
//  Copyright (c) 2020 AppCompany. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol UnlockDisplayLogic: class {
    func displaySomething(viewModel: Unlock.Something.ViewModel)
}

class UnlockController: Controller {
    var interactor: UnlockBusinessLogic?
    var router: (NSObjectProtocol & UnlockRoutingLogic & UnlockDataPassing)?
    
    // MARK: View lifecycle

    override func loadView() {
        self.view = UnlockView(frame: UIScreen.main.bounds)
    }
    
    override func viewDidLoad() {
        super.viewDidLoad()
    }
    
    // MARK: Setup
    
    override func setup() {
        let viewController = self
        let interactor = UnlockInteractor()
        let presenter = UnlockPresenter()
        let router = UnlockRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
        
    override func start() {
        doSomething()
    }
    
    // MARK: Routing
    
    //  override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
    //    if let scene = segue.identifier {
    //      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
    //      if let router = router, router.responds(to: selector) {
    //        router.perform(selector, with: segue)
    //      }
    //    }
    //  }
    
    // MARK: Helper Methods
    func doSomething() {
        let request = Unlock.Something.Request()
        interactor?.doSomething(request: request)
    }
}

// MARK: UnlockDisplayLogic

extension UnlockController: UnlockDisplayLogic {
    func displaySomething(viewModel: Unlock.Something.ViewModel) {
        //nameTextField.text = viewModel.name
    }
}
