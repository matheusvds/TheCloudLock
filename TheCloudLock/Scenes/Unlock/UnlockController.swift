//
//  UnlockViewController.swift
//  TheCloudLock
//
//  Created by Matheus Vasconcelos on 18/01/20.
//  Copyright (c) 2020 AppCompany. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol UnlockDisplayLogic: class {
    func displayFetchDoors(viewModel: Unlock.FetchDoors.ViewModel)
}

class UnlockController: Controller {
    
    // MARK: VIP Cycle
    
    var interactor: UnlockBusinessLogic?
    var router: (NSObjectProtocol & UnlockRoutingLogic & UnlockDataPassing)?
    
    // MARK: Views
    
    private var unlockView: UnlockView = UnlockView(frame: UIScreen.main.bounds)
    
    // MARK: Flow Control
    
    private var viewState: Unlock.State = .loading
    
    // MARK: View lifecycle

    override func loadView() {
        self.view = unlockView
    }
    
    // MARK: Setup
    
    override func setup() {
        let viewController = self
        let interactor = UnlockInteractor()
        let presenter = UnlockPresenter()
        let router = UnlockRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
        
    override func start() {
        setTitle()
        fetchDoors()
    }
    
    // MARK: Helper Methods
    
    private func fetchDoors() {
        startLoading()
        let request = Unlock.FetchDoors.Request()
        interactor?.handleFetchDoors(request: request)
    }
    
    private func setTitle() {
        title = "Unlock"
    }
    
    private func startLoading() {
        setLoadingState(view: &unlockView)
    }
}

// MARK: UnlockDisplayLogic

extension UnlockController: UnlockDisplayLogic, UnlockViewFactory {
    func displayFetchDoors(viewModel: Unlock.FetchDoors.ViewModel) {
        set(view: &unlockView, with: viewModel)
    }
}
