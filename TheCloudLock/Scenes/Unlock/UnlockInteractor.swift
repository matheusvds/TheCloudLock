//
//  UnlockInteractor.swift
//  TheCloudLock
//
//  Created by Matheus Vasconcelos on 18/01/20.
//  Copyright (c) 2020 AppCompany. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol UnlockBusinessLogic {
    func fetchDoors(request: Unlock.FetchDoors.Request)
    func unlockDoor(request: Unlock.UnlockDoor.Request)
}

protocol UnlockDataStore {
    var foundDoors: [Door]? { get }
}

class UnlockInteractor: UnlockDataStore {
    var presenter: UnlockPresentationLogic?
    var worker: UnlockWorker?
    var foundDoors: [Door]?
}

// MARK: UnlockBusinessLogic

extension UnlockInteractor: UnlockBusinessLogic {

    func fetchDoors(request: Unlock.FetchDoors.Request) {
        worker = worker ?? UnlockWorker(cloudLock: CloudLockAPI())
        worker?.fetchDoors(completion: { result in
            
            switch result {
            case .success(let data):
                let doors = data.map({ Door(doorID: $0.doorID,
                                            name: $0.name,
                                            image: $0.image) })
                self.foundDoors = doors
                let response = Unlock.FetchDoors.Response(doors: doors, error: nil)
                self.presenter?.presentFetchDoors(response: response)
                
            case .failure(let error):
                let response = Unlock.FetchDoors.Response(doors: nil, error: error)
                self.presenter?.presentFetchDoors(response: response)
            }
        })
    }
    
    func unlockDoor(request: Unlock.UnlockDoor.Request) {
        guard let doorID = foundDoors?.first?.doorID else {
            let response = Unlock.UnlockDoor.Response(error: .cannotUnlock)
            self.presenter?.presentUnlockDoor(response: response)
            return
        }
        
        worker = worker ?? UnlockWorker(cloudLock: CloudLockAPI())
        worker?.unlockDoor(doorID: doorID, completion: { result in
            
            switch result {
            case .success:
                let response = Unlock.UnlockDoor.Response(error: nil)
                self.presenter?.presentUnlockDoor(response: response)
                
            case .failure(let error):
                let response = Unlock.UnlockDoor.Response(error: error)
                self.presenter?.presentUnlockDoor(response: response)
            }
        })
    }
}
