//
//  DetailPresenter.swift
//  TheCloudLock
//
//  Created by Matheus Vasconcelos on 26/01/20.
//  Copyright (c) 2020 AppCompany. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol DetailPresentationLogic {
    func presentCredentials(response: Detail.FetchItemCredentials.Response)
    func presentSaveCredentials(response: Detail.SaveCredentials.Response)
}

class DetailPresenter: DetailPresentationLogic {
    weak var viewController: DetailDisplayLogic?
    
    // MARK: Do something
    
    func presentCredentials(response: Detail.FetchItemCredentials.Response) {
        let viewModel = format(response: response)
        viewController?.displayCredentials(viewModel: viewModel)
    }
    
    func presentSaveCredentials(response: Detail.SaveCredentials.Response) {
        let viewModel = Detail.SaveCredentials.ViewModel(resultMessage: getErrorMessage(from: response.error))
        viewController?.displaySaveCredentials(viewModel: viewModel)
    }

    private func format(response: Detail.FetchItemCredentials.Response) -> Detail.FetchItemCredentials.ViewModel {
        if let credential = response.credential {
            return Detail.FetchItemCredentials.ViewModel(
                title: credential.name,
                items: credential.credentials.map({ DisplayedCredentialItem(name: $0.name, active: $0.active) }),
                resultMessage: getErrorMessage(from: response.error)
            )
        }
        
        return Detail.FetchItemCredentials.ViewModel(
            title: String(),
            items: [],
            resultMessage: getErrorMessage(from: response.error)
        )
    }
    
    // MARK: - Shared Helpers
    
    private func getErrorMessage(from error: CloudLockError?) -> String {
        guard let error = error else {
            return String()
        }
        
        switch error {
            
        case .cannotFetchCredentials:
            return R.string.localizable.somethingWrong()
        case .cannotSaveCredentials:
            return R.string.localizable.errorWhileSaving()
        default:
            return R.string.localizable.unkownError()
        }
    }
}
