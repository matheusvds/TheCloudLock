//
//  DetailViewControllerTests.swift
//  TheCloudLock
//
//  Created by Matheus Vasconcelos on 27/01/20.
//  Copyright (c) 2020 AppCompany. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import TheCloudLock
import XCTest

class DetailViewControllerTests: XCTestCase {
    // MARK: Subject under test
    
    var sut: DetailController<Doors>!
    var window: UIWindow!
    
    // MARK: Test lifecycle
    
    override func setUp() {
        super.setUp()
        window = UIWindow()
        setupDetailViewController()
    }
    
    override func tearDown() {
        window = nil
        super.tearDown()
    }
    
    // MARK: Test setup
    
    func setupDetailViewController() {
        sut = DetailController()
    }
    
    func loadView() {
        window.addSubview(sut.view)
        RunLoop.current.run(until: Date())
    }
    
    // MARK: Test doubles
    
    class DetailBusinessLogicSpy: DetailBusinessLogic {
        
        var fetchCredentialsCalled = false
        var saveCredentialsCalled = false
        
        func fetchCredentials(request: Detail.FetchItemCredentials.Request) {
            fetchCredentialsCalled = true
        }
        
        func saveCredentials<T>(type: T.Type, request: Detail.SaveCredentials.Request) where T: Item {
            saveCredentialsCalled = true
        }
    }
    
    class DetailBusinessLogicDummy: DetailBusinessLogic {
                
        func fetchCredentials(request: Detail.FetchItemCredentials.Request) { }
        
        func saveCredentials<T>(type: T.Type, request: Detail.SaveCredentials.Request) where T: Item { }
    }
    
    // MARK: Tests
    
    func testShouldFetchCredentialsWhenViewLoads() {
        let spy = DetailBusinessLogicSpy()
        sut.interactor = spy
        loadView()
        
        sut.viewDidLoad()
        
        XCTAssert(spy.fetchCredentialsCalled, "fetchCredentials should be called when view loads")
    }
    
    func testDisplayFetchCredentialsShouldSetNumberOfRowsEqualToCredentials() {
        let items = [Seeds.Model.room, Seeds.Model.hallway]
        let viewModel = Detail.FetchItemCredentials.ViewModel(
            title: "Title",
            items: items,
            resultMessage: ""
        )
        let dummy = DetailBusinessLogicDummy()
        sut.interactor = dummy
        
        sut.displayCredentials(viewModel: viewModel)
        
        XCTAssertEqual(sut.tableView.numberOfRows(inSection: 0), items.count, "FetchCredentials should the number of rows equal to number of credentials")
    }
    
}
