//
//  DetailInteractorTests.swift
//  TheCloudLock
//
//  Created by Matheus Vasconcelos on 27/01/20.
//  Copyright (c) 2020 AppCompany. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import TheCloudLock
import XCTest

class DetailInteractorTests: XCTestCase {
    // MARK: Subject under test
    
    var sut: DetailInteractor!
    
    // MARK: Test lifecycle
    
    override func setUp() {
        super.setUp()
        setupDetailInteractor()
    }
    
    override func tearDown() {
        super.tearDown()
    }
    
    // MARK: Test setup
    
    func setupDetailInteractor() {
        sut = DetailInteractor()
    }
    
    // MARK: Test doubles
    
    class DetailWorkerSpy: DetailWorker {
        
        var saveCalled = false
        
        override func save<T>(type: T.Type, items: [CredentialItem], completion: @escaping (CloudLockResult<Status>) -> Void) where T: Item {
            saveCalled = true
        }
    }
    
    class DetailWorkerStub: DetailWorker {
        override func save<T>(type: T.Type, items: [CredentialItem], completion: @escaping (CloudLockResult<Status>) -> Void) where T: Item {
            completion(.success(result: Status(code: 200)))
        }
    }
    
    class DetailPresentationLogicSpy: DetailPresentationLogic {
        
        var presentCredentialsCalled = false
        var presentSaveCredentialsCalled = false
        
        func presentCredentials(response: Detail.FetchItemCredentials.Response) {
            presentCredentialsCalled = true
        }
        
        func presentSaveCredentials(response: Detail.SaveCredentials.Response) {
            presentSaveCredentialsCalled = true
        }
    }
    
    // MARK: Tests
    func testSaveCredentialsShouldAskWorkerToSaveCredentials() {
        let spy = DetailWorkerSpy(cloudLock: CloudLockAPIDummy())
        sut.worker = spy
        
        sut.saveCredentials(type: Doors.self, request: Detail.SaveCredentials.Request(items: []))
        
        XCTAssert(spy.saveCalled, "saveCredentials should ask worker to save credentials")
    }
    
    func testSaveCredentialsShouldAskPresenterToOutputResponse() {
        sut.worker = DetailWorkerStub(cloudLock: CloudLockAPIDummy())
        let spy = DetailPresentationLogicSpy()
        sut.presenter = spy
        
        sut.saveCredentials(type: Doors.self, request: Detail.SaveCredentials.Request(items: []))
        
        XCTAssert(spy.presentSaveCredentialsCalled, "saveCredentials should ask presenter to presentSaveCredenrtials")
    }
    
    func testFetchCredentialsShouldAskPresenterToOutputResponse() {
        sut.worker = DetailWorker(cloudLock: CloudLockAPIDummy())
        let spy = DetailPresentationLogicSpy()
        sut.presenter = spy
        
        sut.fetchCredentials(request: Detail.FetchItemCredentials.Request())
        
        XCTAssert(spy.presentCredentialsCalled, "fetchCredentials should ask presenter to presentCredentials")
    }
}
