//
//  UnlockPresenterTests.swift
//  TheCloudLock
//
//  Created by Matheus Vasconcelos on 21/01/20.
//  Copyright (c) 2020 AppCompany. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import TheCloudLock
import XCTest

class UnlockPresenterTests: XCTestCase {
    // MARK: Subject under test
    
    var sut: UnlockPresenter!
    
    // MARK: Test lifecycle
    
    override func setUp() {
        super.setUp()
        setupUnlockPresenter()
    }
    
    override func tearDown() {
        super.tearDown()
    }
    
    // MARK: Test setup
    
    func setupUnlockPresenter() {
        sut = UnlockPresenter()
    }
    
    // MARK: Test doubles
    
    class UnlockDisplayLogicSpy: UnlockDisplayLogic {
        
        var displayFetchDoorsCalled = false
        var viewModel: Unlock.FetchDoors.ViewModel!
        
        func displayFetchDoors(viewModel: Unlock.FetchDoors.ViewModel) {
            displayFetchDoorsCalled = true
            self.viewModel = viewModel
        }
        
        func displayUnlockDoor(viewModel: Unlock.UnlockDoor.ViewModel) {
            
        }
    }
    
    // MARK: Tests
    
    func testPresentFetchDoorsShouldFormatFetchDoorsResponseToDisplay() {
        let diplayLogicSpy = UnlockDisplayLogicSpy()
        sut.viewController = diplayLogicSpy
        let response = Unlock.FetchDoors.Response(doors: [Seeds.Doors.hallway], error: nil)
        
        sut.presentFetchDoors(response: response)
        
        let doorFound = diplayLogicSpy.viewModel.items.first
        
        XCTAssertNotNil(doorFound?.doorImage, "presentFetchDoors should set a door image")
        XCTAssertEqual(doorFound?.doorName, "Living Room", "presentFetchDoors should set a door name")
    }
    
    func testPresentFetchDoorsShouldAskViewControllerToDisplayViewModel() {
        let diplayLogicSpy = UnlockDisplayLogicSpy()
        sut.viewController = diplayLogicSpy
        let response = Unlock.FetchDoors.Response(doors: [], error: nil)
        
        sut.presentFetchDoors(response: response)
        
        XCTAssertTrue(diplayLogicSpy.displayFetchDoorsCalled, "presentFetchDoors should call display logic")
    }
    
    func testPresentFetchDoorsShouldSetViewModelStateErrorWhenResponseErrorNotNil() {
        let diplayLogicSpy = UnlockDisplayLogicSpy()
        sut.viewController = diplayLogicSpy
        let response = Unlock.FetchDoors.Response(doors: [], error: .cannotFetch)
        
        sut.presentFetchDoors(response: response)
        
        let viewState = diplayLogicSpy.viewModel.state
        
        XCTAssertEqual(viewState, .fetchDoorsError, "presentFetchDoors should set view state to error ")
    }
}
