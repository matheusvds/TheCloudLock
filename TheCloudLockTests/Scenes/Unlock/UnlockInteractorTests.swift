//
//  UnlockInteractorTests.swift
//  TheCloudLock
//
//  Created by Matheus Vasconcelos on 21/01/20.
//  Copyright (c) 2020 AppCompany. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import TheCloudLock
import XCTest

class UnlockInteractorTests: XCTestCase {

    var sut: UnlockInteractor!
    
    override func setUp() {
        super.setUp()
        setupUnlockInteractor()
    }
    
    override func tearDown() {
        super.tearDown()
    }
    
    func setupUnlockInteractor() {
        sut = UnlockInteractor()
    }
    
    // MARK: - Testing Doubles
    
    class UnlockPresentationLogicSpy: UnlockPresentationLogic {

        var presentFetchDoorsCalled = false
        var presentFetchDoorsErrorCalled = false
        
        func presentFetchDoors(response: Unlock.FetchDoors.Response) {
            presentFetchDoorsCalled = true
        }
        
        func presentUnlockDoor(response: Unlock.UnlockDoor.Response) {
            
        }
        
    }
    
    class UnlockWorkerDummy: DoorsWorker {
        override func fetchDoors(completion: @escaping (CloudLockResult<[Doors]>) -> Void) {
            completion(.success(result: []))
        }
    }
    
    class UnlockWorkerSpy: DoorsWorker {
        
        var findDoorsCalled = false
        
        override func fetchDoors(completion: @escaping (CloudLockResult<[Doors]>) -> Void) {
            findDoorsCalled = true
            completion(.success(result: []))
        }
    }
    
    class UnlockWorkerFake: DoorsWorker {
        
        var success = false
        
        override func fetchDoors(completion: @escaping (CloudLockResult<[Doors]>) -> Void) {
            guard success else {
                completion(.failure(error: .cannotFetch))
                return
            }
            
            completion(.success(result: []))
        }
    }
    
    class CloudLockProtocolDummy: CloudLockProtocol {
        
        func fetchItems<T>(type: T.Type, completion: @escaping (CloudLockResult<T>) -> Void) where T: Decodable, T: Encodable {
            
        }

        func fetchDoors(completion: @escaping FetchDoorsCompletionHandler) {
            completion(.success(result: []))
        }
        
        func unlockDoor(with doorID: String, completion: @escaping UnlockDoorCompletionHandler) {
            
        }
        
        func fetchItemCredentials<T>(type: T.Type, completion: @escaping (CloudLockResult<T>) -> Void) where T: Decodable, T: Encodable {
            
        }
        
        func saveCredentials<T>(type: T.Type, completion: @escaping (CloudLockResult<T>) -> Void) where T: Decodable, T: Encodable {
            
        }
    }
    
    // MARK: - Tests
    
    func testFetchDoorsShouldAskWorkerToFindDoors() {
        let workerSpy = UnlockWorkerSpy(cloudLock: CloudLockProtocolDummy())
        sut.worker = workerSpy
        
        let request = Unlock.FetchDoors.Request()
        sut.fetchDoors(request: request)
        
        XCTAssert(workerSpy.findDoorsCalled, "findDoors method should be called")
    }
    
    func testFetchDoorsShouldAskPresenterToPresentResult() {
        let workerDummy = UnlockWorkerDummy(cloudLock: CloudLockProtocolDummy())
        let presenterSpy = UnlockPresentationLogicSpy()
        
        sut.worker = workerDummy
        sut.presenter = presenterSpy
        
        let request = Unlock.FetchDoors.Request()
        sut.fetchDoors(request: request)
        
        XCTAssert(presenterSpy.presentFetchDoorsCalled, "presentFetchDoors should be called")
    }
}
