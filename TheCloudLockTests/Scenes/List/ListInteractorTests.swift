//
//  ListInteractorTests.swift
//  TheCloudLock
//
//  Created by Matheus Vasconcelos on 26/01/20.
//  Copyright (c) 2020 AppCompany. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import TheCloudLock
import XCTest

class ListInteractorTests: XCTestCase {
    // MARK: Subject under test
    
    var sut: ListInteractor!
    
    // MARK: Test lifecycle
    
    override func setUp() {
        super.setUp()
        setupListInteractor()
    }
    
    override func tearDown() {
        super.tearDown()
    }
    
    // MARK: Test setup
    
    func setupListInteractor() {
        sut = ListInteractor()
    }
    
    // MARK: Test doubles
    
    class ListPresentationLogicSpy: ListPresentationLogic {
        
        var presentFechedItemsCalled = false
        var presentFetchedCredentials = false
        
        func presentFetchedItems(response: List.FetchItems.Response) {
            presentFechedItemsCalled = true
        }
        
        func presentFetchedCredentials(response: List.FetchItemCredentials.Response) {
            presentFetchedCredentials = true
        }
    }
    
    class ListWorkerSpy: ListWorker {
        
        var fetchItemsCalled = false
        
        override func fetchItems<T>(row: Int? = nil, name: String? = nil, type: T.Type, completion: @escaping (CloudLockResult<[T]>) -> Void) where T: Item {
            fetchItemsCalled = true
            completion(.success(result: []))
        }
    }
    
    class CredentialsWorkerSpy: CredentialsWorker {
        var fetchItemsCalled = false

        override func fetchItemCredentials<T, U>(id: String, name: String, type: T.Type, completion: @escaping (CloudLockResult<U>) -> Void) where T: Item, U: Decodable, U: Encodable {
            fetchItemsCalled = true
            completion(.failure(error: .cannotFetchCredentials))
        }
    }
    
    // MARK: - Fetch Items Tests
    
    func testFetchItemsShouldAskWorkerToFetchItems() {
        let spy = ListWorkerSpy(cloudLockAPI: CloudLockAPIDummy())
        sut.worker = spy
        
        let request = List.FetchItems.Request()
        sut.fetchItems(type: Doors.self, request: request)
        
        XCTAssert(spy.fetchItemsCalled, "fetchItems should ask worker to fetch items")
    }
    
    func testFetchItemsShouldAskPresenterToOutputResponse() {
        let dummyWorker = ListWorkerSpy(cloudLockAPI: CloudLockAPIDummy())
        let presenterSpy = ListPresentationLogicSpy()
        sut.worker = dummyWorker
        sut.presenter = presenterSpy
        
        let request = List.FetchItems.Request()
        sut.fetchItems(type: Doors.self, request: request)
        
        XCTAssert(presenterSpy.presentFechedItemsCalled, "fetchItems should ask presenter to output response")
    }
    
        // MARK: - Fetch Credentials Tests
    
    func testFetchCredentialsShouldAskWorkerToFetchCredentials() {
        let spyWorker = CredentialsWorkerSpy(cloudLockAPI: CloudLockAPIDummy())
        sut.credentialWorker = spyWorker
        
        let request = List.FetchItemCredentials.Request(id: "", name: "")
        sut.fetchCredentials(type: Doors.self, request: request)
        
        XCTAssert(spyWorker.fetchItemsCalled, "fetchCredentials should ask worker to fetch credentials")
    }
    
    func testFetchCredentialsShouldAskPresenterToOutputResponse() {
        let dummyWorker = CredentialsWorkerSpy(cloudLockAPI: CloudLockAPIDummy())
        let presenterSpy = ListPresentationLogicSpy()
        sut.credentialWorker = dummyWorker
        sut.presenter = presenterSpy
        
        let request = List.FetchItemCredentials.Request(id: "", name: "")
        sut.fetchCredentials(type: Doors.self, request: request)
        
        XCTAssert(presenterSpy.presentFetchedCredentials, "fetchCredentials should ask presenter to output response")

    }
}
